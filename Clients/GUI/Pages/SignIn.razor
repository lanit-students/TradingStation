@page "/signin"
@using Authentication
@using ViewModels
@using DTO
@using Scripts
@inject AuthStateProvider AuthenticationProvider
@inject NavigationManager NavigationManager

<h3 style="color: red; display: @(isHidden ? "none" : "block")"> Wrong login or password</h3>
<div class="col-12">
    <h3><b>Sign In</b></h3>
    <hr />
    <EditForm Model="@userInput" OnValidSubmit="@TrySignIn">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Email">Email</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Email" placeholder="example@gmail.com" />
            <ValidationMessage For="() => userInput.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText class="form-control col-3" type="Password" @bind-Value="userInput.Password" placeholder="*****" />
            <ValidationMessage For="() => userInput.Password" />
        </div>
        <input type="submit" class="form-control col-1 button btn-primary" value="Sign in" />
    </EditForm>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private SignInViewModel userInput;
    bool isHidden = true;
    string errorMessage = "";

    private void TrySignIn()
    {
        var user = new UserEmailPassword(userInput.Email, userInput.Password);
        try
        {
            // TODO: add logic after MassTransit flow iw merged
            //SignInner.SignIn(user);
            AuthenticationProvider.MarkSignedIn();
            NavigationManager.NavigateTo("/userinfo");
        }
        catch(Exception e)
        {
            userInput.Password = "";
            isHidden = false;
            errorMessage = e.Message;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        userInput = new SignInViewModel();

        var claims = (await authState).User;

        if (claims.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/userinfo");
        }
    }
}
