@page "/signup"
@inject AuthStateProvider AuthenticationProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="col-12">
    <h3><b>Sign up</b></h3>
    <hr />

    <EditForm Model="@userInput" OnValidSubmit="@TrySignUp">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Name">Name:</label>
            <InputText class="form-control col-3" @bind-Value="userInput.FirstName" placeholder="Your name" />
        </div>
        <div class="form-group">
            <label for="Surname">Surname:</label>
            <InputText class="form-control col-3" @bind-Value="userInput.LastName" placeholder="Your surname" />
        </div>
        <div class="form-group">
            <label for="Birthday">Birthday:</label>
            <InputDate class="form-control col-3" @bind-Value="@userInput.Birthday" />
        </div>
        <div class="form-group">
            <label for="Email">Email</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Email" placeholder="example@gmail.com" />
        </div>
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText class="form-control col-3" type="password" @bind-Value="userInput.Password" placeholder="*****" />
        </div>
        <div class="form-group">
            <label for="ConfirmPassword">Confirm Password</label>
            <InputText class="form-control col-3" type="password" @bind-Value="userInput.ConfirmPassword" placeholder="*****" />
        </div>
        <br />
        <ValidationSummary />
        <label style=“color:red;display:@isErrorDisplayed”> @errorMessage </label>
        <br />

        <input type="submit" class="form-control col-1 button btn-primary" value="Sign up" />

    </EditForm>
</div>


@code {
    bool isErrorDisplayed = false;
    string errorMessage;
    private SignUpViewModel userInput;

    public async Task TrySignUp()
    {
        try
        {
            var request = new CreateUserRequest
            {
                FirstName = userInput.FirstName,
                LastName = userInput.LastName,
                Birthday = userInput.Birthday,
                Email = userInput.Email,
                Password = userInput.Password
            };

            await SignUpper.SignUp(request);
            await LocalStorage.ClearAsync();

            var signinRequest = new LoginRequest
            {
                Email = userInput.Email,
                Password = userInput.Password
            };

            var userToken = await SignInner.SignIn(signinRequest);

            LocalStorage.SetItemAsync("id", userToken.UserId);
            LocalStorage.SetItemAsync("token", userToken.Body);

            AuthenticationProvider.MarkSignedIn();
            NavigationManager.NavigateTo("/userinfo");
        }
        catch (BadRequestException)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = "Something went wrong during registration";
        }
        catch (NotFoundException)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = "Something went wrong during signing you in";
        }
        catch (Exception e)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = e.Message;
        }
    }

    protected override void OnInitialized()
    {
        userInput = new SignUpViewModel();
    }
}